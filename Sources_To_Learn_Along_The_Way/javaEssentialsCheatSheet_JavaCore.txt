===================================
JAVA ESSENTIALS CHEAT SHEET
===================================

*** OBJECT-ORIENTED PROGRAMMING (OOP) ***
- Four Pillars:
  1. Encapsulation: Data hiding using private fields + public methods
  2. Abstraction: Hide implementation details
  3. Inheritance: IS-A relationships (extends keyword)
  4. Polymorphism: Method overriding/overloading

- Key Components:
  • Classes (blueprints for objects)
  • Objects (class instances)
  • Constructors (object initialization)
  • Access Modifiers (public/private/protected)
  • this/super keywords

*** VARIABLES & DATA TYPES ***
- Primitive Types:
  byte, short, int, long, float, double, char, boolean

- Reference Types:
  String, Arrays, Objects, Collections

- Variable Essentials:
  • Declaration: <type> <name>
  • Initialization: = operator
  • Scope (local/instance/class)
  • Type Casting (implicit/explicit)
  • Constants: final keyword

*** STRING FUNDAMENTALS ***
- Immutable Character Sequences
- Key Features:
  • String Pool memory management
  • Concatenation with + operator
  • Common Methods:
    - length(), charAt(), substring()
    - equals() vs == comparison
    - indexOf(), contains(), replace()
    - split(), trim(), format()

*** LOOPS & CONDITIONALS ***
- Loop Types:
  1. for (counter-based)
  2. enhanced for (collections/arrays)
  3. while (pre-check condition)
  4. do-while (post-check condition)

- Conditional Statements:
  • if-else if-else ladder
  • switch-case (constant matching)
  • Ternary operator: ? :

- Control Flow:
  • break (exit loop/switch)
  • continue (skip iteration)
  • return (exit method)

*** INTERFACES ***
- Contract for Classes:
  • Defines method signatures (no implementation)
  • Allows multiple interface implementation
  • Default Methods (Java 8+)
  • Static Methods (Java 8+)
  • Functional Interfaces (Single Abstract Method)

- Key Uses:
  • Abstraction layer
  • Loose coupling
  • API design
  • Polymorphism

*** FILE HANDLING (BASIC I/O) ***
- Core Classes:
  • File (path representation)
  • FileReader/FileWriter (text files)
  • BufferedReader/BufferedWriter (buffered I/O)
  • FileInputStream/FileOutputStream (bytes)

- Key Concepts:
  • try-with-resources (auto-close)
  • Exception Handling (IOException)
  • File Paths (absolute/relative)
  • Text vs Binary Data
  • Serialization (Optional)

*** QUICK SYNTAX REFERENCE ***
- Class: public class Name { ... }
- Method: <returnType> name(params) { ... }
- Interface: interface Name { ... }
- Loop: for(<init>; <condition>; <increment>)
- Conditional: if(<boolean_expression>)
- Try Block: try (...) { } catch (...) { }

===================================
[Core Concepts for CRUD Operations]
===================================