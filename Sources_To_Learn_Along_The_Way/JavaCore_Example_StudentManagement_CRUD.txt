=============================================
JAVA CRUD CLI CHEAT SHEET: STUDENT MANAGEMENT
=============================================

*** OOP CONCEPTS ***
// Class blueprint for Student
public class Student {
    // Encapsulation: private fields
    private int id;
    private String name;
    private String email;

    // Constructor
    public Student(int id, String name, String email) {
        this.id = id;
        this.name = name;
        this.email = email;
    }

    // Getters & Setters
    public int getId() { return id; }
    public String getName() { return name; }
    public void setEmail(String email) { this.email = email; }
    // ... other getters/setters
}

*** VARIABLES & DATA TYPES ***
Primitive Types:
- int (32-bit integer)
- double (64-bit floating point)
- boolean (true/false)
- char (single character)

Reference Types:
- String (text)
- Arrays (fixed-size collection)
- ArrayList (dynamic collection)

Declaration Examples:
int studentCount = 0;
final double MAX_GPA = 4.0;
String[] courses = {"Math", "Science"};
ArrayList<Student> studentList = new ArrayList<>();

*** STRING OPERATIONS ***
String creation: String s = "Hello";
Concatenation: String fullName = firstName + " " + lastName;
Important Methods:
- length(): s.length()
- substring(): s.substring(1, 3)
- equals(): s.equals("test")
- contains(): s.contains("sub")
- toLowerCase()/toUpperCase()

*** LOOPS & CONDITIONALS ***
// For loop
for(int i=0; i<students.size(); i++) {
    System.out.println(students.get(i));
}

// Enhanced for loop
for(Student s : studentList) {
    // process student
}

// While loop
while(hasMoreStudents) {
    // read students
}

// If-else
if(grade >= 90) {
    System.out.println("A");
} else if(grade >= 80) {
    System.out.println("B");
} else {
    System.out.println("C");
}

*** INTERFACES ***
// Service interface for CRUD operations
public interface StudentService {
    void addStudent(Student s);
    void updateStudent(int id, Student updated);
    void deleteStudent(int id);
    Student getStudent(int id);
}

// Implementation
public class StudentManager implements StudentService {
    private ArrayList<Student> students = new ArrayList<>();

    public void addStudent(Student s) {
        students.add(s);
    }
    // Implement other methods...
}

*** FILE HANDLING (BASIC I/O) ***
// Writing to file
try(FileWriter writer = new FileWriter("students.txt")) {
    for(Student s : students) {
        writer.write(s.getId() + "," + s.getName() + "\n");
    }
} catch (IOException e) {
    e.printStackTrace();
}

// Reading from file
try(BufferedReader reader = new BufferedReader(new FileReader("students.txt"))) {
    String line;
    while ((line = reader.readLine()) != null) {
        String[] data = line.split(",");
        // Create Student objects
    }
} catch (IOException e) {
    e.printStackTrace();
}

*** CRUD OPERATIONS EXAMPLE ***
// Typical CLI structure
public static void main(String[] args) {
    StudentManager manager = new StudentManager();
    Scanner scanner = new Scanner(System.in);

    while(true) {
        System.out.println("1. Add Student\n2. View Students\n3. Update\n4. Delete\n5. Exit");
        int choice = scanner.nextInt();

        switch(choice) {
            case 1:
                // Add logic
                break;
            case 2:
                // View logic
                break;
            case 3:
                // Update logic
                break;
            case 4:
                // Delete logic
                break;
            case 5:
                System.exit(0);
            default:
                System.out.println("Invalid choice");
        }
    }
}

*** HELPFUL TIPS ***
1. Use ArrayList<Student> for temporary storage
2. Use try-with-resources for file operations
3. Validate user input with Scanner methods (hasNextInt() etc.)
4. Implement toString() in Student for easy printing
5. Use switch statements for menu handling
6. Consider using String.format() for output formatting

Combine these concepts to:
- Store students in memory (ArrayList)
- Persist data to text file
- Implement menu-driven interface
- Handle input validation
- Manage student lifecycle (create, read, update, delete)